<?xml version="1.0" encoding="utf-8"?>
<!--
     * -*- Mode: MXML -*-
     * *************************************************************************
     *
     * Copyright 2007-2009 Juice, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * *************************************************************************
-->
<mx:Application height="100%"
                width="100%"
                layout="vertical"
                preloader="org.juicekit.util.preloader.JuiceKitPreloader"
                xmlns:charts="org.juicekit.charts.*"
                xmlns:controls="org.juicekit.visual.controls.*"
                xmlns:data="org.juicekit.util.data.*"
                xmlns:local="*"
                xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:renderers="org.juicekit.visual.renderers.*">

  <mx:Style source="style.css"/>
  <controls:StylerInstance/>

  <mx:Script>
    <![CDATA[
      import flare.util.Strings;
      import mx.collections.Sort;
      import mx.collections.SortField;
      import mx.controls.Alert;
      import mx.events.CollectionEvent;
      import flare.util.Maths;
      import org.juicekit.flare.util.palette.ColorPalette;
      import org.juicekit.events.DataMouseEvent;
      import org.juicekit.visual.renderers.IndexCircleRenderer;

      import mx.rpc.http.HTTPService;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.collections.ArrayCollection;
      import mx.formatters.NumberFormatter;
      import mx.events.SliderEvent;

      /**
       * This is the dataProvider for USMapControl.
       */
      [Bindable]
      private var mapData:ArrayCollection = new ArrayCollection();

      /**
       * The US unemployment rate for the selected date
       */
      [Bindable]
      private var usAverage:String = 'na';

      /**
       * The selected date.
       */
      [Bindable]
      private var selectedDate:String = 'na';


      /**
       * Object of type USMapRollOver is used to display rate as user hovers mouse
       * from one state to another.
       */
      private var rollOver:USMapRollOver = new USMapRollOver();

      /**
       * The color palette used to display unemployment rates.
       */
      private var colorPalette:ColorPalette = ColorPalette.getPaletteByName('hot').reverse();

      /**
       * The maximum rate of unemployment on the color scale
       */
      private const MAX_RATE:Number = 14;

      /**
       * Maps state names to abbreviations
       * The map requires state data to be associated with state abbreviations
       * while the BLS unemployment dataset has full state names.
       */
      private const state_abbr_lookup:Object = {'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'District of Columbia': 'DC', 'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Puerto Rico': 'PR', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'US': 'US', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'};

      [Bindable]
      public var stateTrends:ArrayCollection;

      private function mapEncodingFunction(name:String, data:Object):uint {
        const lookupValue:Number = Maths.clampValue(data.rate / MAX_RATE, 0.0, 1.0);
        return colorPalette.getColor(lookupValue); //This maps the max color for the out-of-range states.
      }

      /**
       * This method is called when the delimited data has been loaded.
       *
       * The data is available as an ArrayCollection in bls.result
       */
      private function loadSucceeded(event:Event):void {
        var barData:Array = [];
        var cnt:int = 0;
        var o:Object;

        // calculate trends for each state, saving only one in 12 datapoints        
        stateTrends = new ArrayCollection();
        for (var stateName:String in state_abbr_lookup) {
          var row:Object = {};
          row['name'] = stateName;
          var trendArr:Array = [];
          cnt = 0;
          for each (o in bls.result) {
            cnt += 1;
            if (cnt % 12 == 0)
              trendArr.push({'Date': o.Date, 'rate': o[stateName]});
          }
          row['trend'] = trendArr;
          stateTrends.addItem(row);
        }

        // sort the states by name
        var nameSortField:SortField = new SortField('name');
        var dataSort:Sort = new Sort();
        dataSort.fields = [nameSortField];
        stateTrends.sort = dataSort;
        stateTrends.refresh();

        // extract data for the long term trend behind the slider
        var allTrendData:Array = []
        for each (o in bls.result) {
          allTrendData.push({'Date': o.Date, 'rate': o.US});
        }
        allTrendChart.data = allTrendData;

        allTrendChart.colorEncoder.scale.preferredMax = 14;
        allTrendChart.colorEncoder.scale.preferredMin = 0;
        allTrendChart.invalidateProperties();
        extractBLSData(1);
      }

      /**
       * Called whenever the selected date changes.
       *
       * Extracts data from the current row in the bls dataset
       *
       */
      private function extractBLSData(idx:int):void {
        var row:Object = bls.result.getItemAt(idx);
        usAverage = Strings.format('{0:0.0%}', row.US / 100);
        selectedDate = row.Date;
        var stateData:Array = [];
        mapData.removeAll();
        for (var k:String in state_abbr_lookup) {
          stateData.push({state: k, value: row[k]});
          mapData.addItem({abbr: state_abbr_lookup[k], name: k, rate: row[k]});
        }
        map.encodeMap(map.data as Array);
      }


      /**
       * This is an event handler for the change event of the Slider.
       *
       * Extract the BLS data at the appropriate index
       */
      private function sliderChange(event:SliderEvent):void {
        extractBLSData(int(event.currentTarget.value));
      }


      /**
       * This is an event handler for the juicekit event. This function is called
       * when user hovers mouse over USMapControl.
       */
      private function onMouseOver(event:DataMouseEvent):void {
        /* Transform the 'overState' of button by applying alphaOffset to it.
         * This would make the state stand out (highlight) as the user hovers over it. */
        const display:DisplayObject = (event.sender as SimpleButton).overState;
        const ct:ColorTransform = display.transform.colorTransform;
        ct.alphaOffset = -180;
        display.transform.colorTransform = ct;

        const dataObj:Object = event.data;
        if (dataObj) {
          rollOver.rate = dataObj.rate;
          rollOver.stateName = dataObj.stateName;
          // Postiion the roll-over display.
          rollOver.position(new Rectangle(event.localX, event.localY, map.width, map.height));

          // Make the panel visible.
          map.addChild(rollOver);
        }
      }


      /**
       * This is an event handler for the juicekit mouse out event.
       */
      private function onMouseOut(event:DataMouseEvent):void {
        if (map.contains(rollOver))
          map.removeChild(rollOver);
      }


      /**
       * This function formats the data tip of the slider.
       */
      private function dataTipFormatter(value:Number):String {
        return bls.result.getItemAt(value).Date
      }
    ]]>
  </mx:Script>

  <!-- bls stands for Bureau of Labor Statistics -->
  <data:ArrayCollectionFromUrl id="bls" dataLoaded="{loadSucceeded}" url="http://media.juiceanalytics.com/census/blsunemployment.csv"/>

  <mx:HBox height="100%" width="960" horizontalGap="20">

    <mx:VBox height="100%" width="620" verticalGap="20">

      <mx:Label styleName="jkHeader" text="Unemployment Rates over Time"/>
      <mx:Text width="100%" text="Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."/>

      <mx:HBox width="100%" horizontalGap="20">

        <!--
             a canvas containing a chart of the entire time series trend
             for the US, with a slider overlaid
        -->
        <mx:Canvas height="80" width="400">
          <charts:ColumnChart id="allTrendChart"
                              height="50"
                              width="100%"
                              bottom="30"
                              left="18"
                              right="18"
                              alpha="0.5"
                              categoryAxisShowLabels="false"
                              categoryAxisShowLines="false"
                              categoryEncodingField="Date"
                              colorEncodingField="rate"
                              palette="{ColorPalette.getPaletteByName('hot').reverse()}"
                              transitionPeriod="NaN"
                              valueAxisLabelFormat="0"
                              valueAxisMaximum="20"
                              valueAxisShowLabels="false"
                              valueAxisShowLines="false"
                              valueEncodingField="rate"/>
          <mx:HSlider id="dateSlider"
                      width="100%"
                      top="20"
                      change="sliderChange(event)"
                      dataTipFormatFunction="dataTipFormatter"
                      labels="[1976, 2009]"
                      liveDragging="true"
                      maximum="399"
                      minimum="0"
                      snapInterval="1"
                      tickInterval="12"
                      tickOffset="7"
                      tickThickness="0"/>
          <mx:Label top="60" paddingLeft="10" styleName="jkNotes" text="Move the slider to explore unemployment over time"/>
        </mx:Canvas>

        <!-- this spacer will push the US unemployment display to the far right -->
        <mx:Spacer width="100%"/>

        <!-- The view showing US unemployment rate -->
        <mx:VBox width="150" verticalGap="-10">
          <mx:Label width="150" styleName="jkBody" text="US Unemployment Rate" textAlign="right"/>
          <mx:Label width="150"
                    fontSize="32"
                    fontWeight="bold"
                    styleName="jkHeader"
                    text="{usAverage}"
                    textAlign="right"/>
          <mx:Label width="150" styleName="jkBody" text="{selectedDate}" textAlign="right"/>
        </mx:VBox>
      </mx:HBox>


      <!--
           A canvas is required so the legend can be positioned absolutely on the map.
      -->
      <mx:Canvas height="420" width="600">
        <controls:USMapControl id="map"
                               data="{mapData}"
                               height="{map.width*0.7}"
                               width="600"
                               colorEncodingFunction="mapEncodingFunction"
                               jkDataMouseOut="onMouseOut(event)"
                               jkDataMouseOver="onMouseOver(event)"
                               stateAbbrField="abbr"
                               styleName="jkBase"/>

        <!-- the legend -->
        <mx:Canvas height="120"
                   width="100"
                   bottom="20"
                   right="0"
                   horizontalScrollPolicy="off"
                   verticalScrollPolicy="off">
          <mx:Label top="5"
                    right="0"
                    styleName="jkNotes"
                    text="Unemployment rate"
                    textAlign="left"/>
          <local:PaletteLegend height="100%"
                               width="20"
                               top="20"
                               right="40"
                               palette="hot"/>
          <mx:Label width="30"
                    top="20"
                    right="10"
                    styleName="jkNotes"
                    text="14%"
                    textAlign="left"/>
          <mx:Label width="30"
                    top="62"
                    right="10"
                    styleName="jkNotes"
                    text="7"
                    textAlign="left"/>
          <mx:Label width="30"
                    top="105"
                    right="10"
                    styleName="jkNotes"
                    text="0"
                    textAlign="left"/>
        </mx:Canvas>
      </mx:Canvas>
    </mx:VBox>

    <mx:VBox height="100%" width="300">
      <!--
           A datagrid
           The styling has been chosed to mirror a minimalist style
           used by the NY Times
      -->
      <mx:DataGrid id="dataGrid"
                   dataProvider="{stateTrends}"
                   height="100%"
                   width="100%"
                   alternatingItemColors="[0xffffff, 0xffffff]"
                   borderThickness="0.0"
                   headerColors="[0xf0f4f5, 0xf0f4f5]"
                   horizontalGridLineColor="0xefefef"
                   horizontalGridLines="true"
                   paddingBottom="0"
                   paddingTop="0"
                   rollOverColor="0xf6fafb"
                   rowCount="{dataGrid.dataProvider.length+1}"
                   rowHeight="12"
                   styleName="jkNotes"
                   verticalGridLineColor="0xefefef">
        <mx:columns>
          <mx:DataGridColumn dataField="name" headerText="State"/>
          <mx:DataGridColumn dataField="trend" headerText="Trend" itemRenderer="FlareBarChartRenderer"/>
        </mx:columns>
      </mx:DataGrid>
    </mx:VBox>

  </mx:HBox>
</mx:Application>
