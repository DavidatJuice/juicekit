<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" initialize="init()" xmlns:charts="org.juicekit.charts.*">

  <mx:Script>
    <![CDATA[
      import mx.events.CollectionEvent;
      import mx.controls.Label;
      import flash.utils.setTimeout;
      import mx.events.TweenEvent;
      import mx.events.EffectEvent;
      import mx.effects.AnimateProperty;
      import org.juicekit.effects.AnimateColor;
      
      /**
       * The JuiceKit LineChart displays an ArrayCollection of objects as a 
       * line chart with good visualization defaults. 
       *
       * [
       *   {QTR: '2007-Q1', VT: 52.2, NH: 40.3},
       *   {QTR: '2007-Q2', VT: 57.1, NH: 44.6},
       *   {QTR: '2007-Q3', VT: 60.9, NH: 43.7}
       * ]
       *
       * <LineChart
       * 	dataProvider="{an ArrayCollection or LiveQuery result}"
       *  xAxisField="{QTR}"
       *  palette="{a color palette name or reference or color manager}"
       *  />
       *
       * data:
       *    dataProvider: an ArrayCollection or LiveQuery
       *
       * xAxis:
       *    xAxisField - takes the field from the data provider, returns values in sorted order
       *    xAxisValues - takes the explicit values in order, overrides xAxisField [not implemented]
       *    xAxisNameLookup - override the displayed names using this mapping
       *
       * yAxis:
       *    labelFormat - a Flare Strings formatting
       *
       * colors:
       *    palette - a palette name, colorPalette, or colorManager
       *        if a palette name, looks the palette up and creates a palette limited to the graphed series
       *
       * fonts:
       *    fontFamily - a fontFamily to use
       *    fontSize - a fontSize
       *
       * legend:
       *    legendType - none|labelseries|inchart
       *       none - no labels for serises
       *       onseries - automatically apply labels to last point in series (default)
       *       inchart - display the legend in the chart body positioning is automatic
       *       right - display the legend on the right of the cahrt
       *       left -
       *
       * dataTip:
       *
       *
       * detail:
       *    low - a sparkline
       *        display bottom and top of vertical axis
       *        start and end of horizontal axis
       *        reduce size of data tip
       *        reduce default font size to 9pt
       *        reduce default line weight = 1.5
       *    normal
       *        default line weight = 3.0
       *        default font size 12pt
       *    high
       *        default line weight = 4.0
       *        default font size 14pt
       *        show larger more detailed tooltips
       *        show all annotations
       *
       */

      import org.juicekit.flare.util.Colors;
      import mx.binding.utils.BindingUtils;
      import mx.binding.utils.ChangeWatcher;
      import org.juicekit.flare.util.palette.ColorPalette;
      import mx.charts.series.ColumnSeries;
      import mx.charts.series.LineSeries;
      import mx.collections.ArrayCollection;
      import org.juicekit.visual.controls.DataTipSkin;
      import flare.util.Strings;
      
      /**
      * Timing for animated effects in milliseconds
      */
      [Bindable]
      public var transitionPeriod:Number = 1000;
      
      [Bindable]
      public var interpolateEffect:SeriesInterpolate = interpolateIn;


      [Bindable]
      public var dataProvider:ArrayCollection = new ArrayCollection([]);


      /**
       * If set, determines the xAxis category items using the unique
       * items from the data provider
       */
      [Bindable]
      public function set xAxisField(v:String):void {
        _xAxisField = v;
        if (lineChart) updateChartSeries();
      }
      public function get xAxisField():String {
        return _xAxisField;
      }
      private var _xAxisField:String = null;
      
      
      //--------------------------- 
      // lineWidth
      //---------------------------       

      [Bindable]
      public function set lineWidth(v:Number):void {
        _lineWidth = v;
        updateChartSeriesProperties();
      }
      public function get lineWidth():Number {
        var scaleFactor:Number = 1.0;        
        if (detail == 'low') scaleFactor = 0.5;
        else if (detail == 'high') scaleFactor = 1.5;
        return _lineWidth*scaleFactor;
      }
      
      private var _lineWidth:Number = 3.0;


      //--------------------------- 
      // yMaximum
      //---------------------------       

      /**
      * yMaximum sets the maximum value on the yAxis. This transition
      * is animated
      */
      [Bindable]
      public function set yMaximum(v:Number):void {
        disableDataEffect();
        var ap:AnimateProperty = new AnimateProperty(yAxis)
        ap.property = 'maximum';
        ap.fromValue = yAxis.maximum;
        ap.toValue = v;
        ap.duration = transitionPeriod;
        ap.play();
        ap.addEventListener(EffectEvent.EFFECT_END, function(e:Event):void {
          enableDataEffect();
          });              
      }
      public function get yMaximum():Number {
        return yAxis.maximum;
      }

      /**
       * If set, determines the maximum number of xAxis category items to
       * show
       */
      [Bindable]
      public var xLimit:uint = 0;

      /**
       * If set, determines the specific values to appear on the x axis
       */
      [Bindable]
      public var xAxisValues:Array = null;


      /**
      * A Function or Object for determining the xAxis labels.
      * 
      * If xAxisNameLookup is a function, this function will be used
      * as the xAxis labelFunction. The function signature is:
      * 
      * <code>public function labelFunction(cat:Object, previouscat:Object, ax:*):String</code>
      * 
      * If xAxis is an Object, the names will be determined by object lookup.  
      *  
      */
      [Bindable]
      public var xAxisNameLookup:Object = null;


      [Bindable]
      public var labelFontSize:uint = 12;


      [Bindable]
      public function get detail():String {
        return _detail;
      }

      public function set detail(v:String):void {
        if (_detail != v) {
          _detail = 'normal';
          if (v == 'low') _detail = 'low';
          if (v == 'high') _detail = 'high';
          yAxis.detail = _detail;
          yAxis.labelFunction = yAxisLabelFunction;
          updateChartSeries();          
        }
      }
      
      private var _detail:String = "normal";


      [Bindable]
      public function get palette():String {
        return _palette;
      }


      public function set palette(v:*):void {
        if (v is String) {
          _palette = v;
          colorPalette = ColorPalette.getPaletteByName(_palette, seriesNames.length+1);
        }
        if (v is ColorPalette) {
          colorPalette = v;
        }
        updateChartSeries();
      }
      
      // palette name
      private var _palette:String = 'spectral';
      // ColorPalette object
      private var colorPalette:ColorPalette = null;


      [Bindable]
      public var labelFormat:String = "#,##0.00;0;0";


      private function init():void {
        BindingUtils.bindSetter(function(o:Object):void {
          // reset the labelFunction when the labelFormat changes
          // this invalidates the label cache and regenerates the labels
          yAxis.labelFunction = yAxisLabelFunction;
        }, this, 'labelFormat');
        BindingUtils.bindSetter(function(o:Object):void {
          updateChartSeries();
        }, this, 'dataProvider');
      }
      

      public function updateChartSeriesProperties():void {
        var idx:int = 0;
        if (lineChart != null) {
          for each (var ser:LineSeries in lineChart.series) {
            var stroke:Stroke = ser.getStyle('lineStroke');
            stroke.color = colorPalette.getColorByIndexFromAC(idx);
            stroke.weight = lineWidth;
            ser.setStyle('lineStroke', stroke);
            idx += 1;
          }
          lineChart.invalidateDisplayList();
        }
      }

      private var seriesNames:Array = [];

      /**
       * Reset the data series used in the charts using unique items in groupByDimension
       */
      public function updateChartSeries():void {
        if (lineChart && dataProvider && dataProvider.length > 0) {
          seriesNames = [];
          for (var k:String in dataProvider.getItemAt(0)) {
            if (k != xAxisField && dataProvider.getItemAt(0)[k] is Number) seriesNames.push(k);
          }
          colorPalette = ColorPalette.getPaletteByName(_palette, seriesNames.length+1);
          
          disableDataEffect();
          var newLineSeries:Array = [];
          var idx:int = 0;
          annotationCanvas.removeAllChildren();
          for each (var itm:String in seriesNames) {
            // build a line series
            
            var ser:LineSeries = new LineSeries()
            ser.xField = xAxisField;
            ser.yField = ser.displayName = itm;
            ser.filters = [];
            var stroke:Stroke = new Stroke(colorPalette.getColorByIndexFromAC(idx), lineWidth, 1, true)
            ser.setStyle('lineStroke', stroke);
            ser.setStyle('showDataEffect', interpolateIn);            
            newLineSeries.push(ser);
  
            if (detail == 'normal' || detail == 'high') {
              var columnLabel:Label = new Label();
  
              columnLabel.setStyle('align', 'left');
              columnLabel.setStyle('fontFamily', 'Arial');
              columnLabel.setStyle('fontSize', 12);
              columnLabel.setStyle("fontWeight", "normal");
              columnLabel.setStyle("color", Colors.desaturate(Colors.darken(colorPalette.getColorByIndexFromAC(idx))));
              columnLabel.text = ser.displayName;
              
              // TODO: update the position of the label if the chart data changes
              annotationCanvas.addDataChild(columnLabel, null, null, dataProvider.getItemAt(dataProvider.length-1)[ser.xField], dataProvider.getItemAt(dataProvider.length-1)[ser.yField]-yAxis.maximum*0.0015);
            }
            idx += 1;
          }
          lineChart.series = newLineSeries;            
          enableDataEffect();
        }
      }
      

      public function yAxisLabelFunction(cat:Object, previouscat:Object, ax:*):String {
        return Strings.format("{0:" + labelFormat + "}", cat);
      }



      [Bindable(event='xAxisLabelChanged')]
      public function xAxisLabelFunction(item:Object, prevValue:Object, axis:CategoryAxis, categoryItem:Object):String {
        if (xAxisNameLookup) {
          if (xAxisNameLookup is Function) {
            return xAxisNameLookup(item, prevValue, axis, categoryItem);
          }
          else {
            if (xAxisNameLookup.hasOwnProperty(item as String)) {
              return xAxisNameLookup[item] as String;
            } else {
              return item as String; 
            }
          }
        }
        return Strings.format("{0:" + labelFormat + "}", item);
      }


      [Bindable(event='labelFormatChanged')]
      public function defineLabel(cat:Object, previouscat:Object, ax:*):String {
        return Strings.format("{0:" + labelFormat + "}", cat);
      }
      
      private function disableDataEffect():void {
        for each (var s:LineSeries in lineChart.series) {
          s.setStyle('showDataEffect', null);
        }
      }
      
      private function enableDataEffect():void {
        // restore the interpolation action after a short delay          
        setTimeout(function() {
          for each (var s:LineSeries in lineChart.series) {
            s.setStyle('showDataEffect', interpolateIn);
          }
        }, 500);
      }

    ]]>
  </mx:Script>

  <mx:SeriesInterpolate id="interpolateIn" duration="{transitionPeriod}"/>
  <mx:Stroke id="lineStroke_actual" color="#330000" weight="3"/>
  <mx:Stroke id="lineStroke_circle" color="#772C00" weight="3"/>
  <mx:Stroke id="simpleStroke" color="0xaaaaaa" weight="1"/>
  <mx:Stroke id="zeroStroke" color="0x00ffffff" weight="0"/>



  <mx:CategoryAxis id="xAxis" categoryField="{xAxisField}" labelFunction="xAxisLabelFunction"/>
  
  <charts:LinearAxis id="yAxis" displayName="Total Members" labelFunction="yAxisLabelFunction"/>

  <mx:LineChart id="lineChart"
                height="100%"
                width="100%"
                dataProvider="{dataProvider}"
                showDataTips="true"
                showDataTipTargets="true"
                dataTipRenderer="{DataTipSkin}"
                creationComplete="updateChartSeries()">

    <mx:annotationElements>
        <mx:CartesianDataCanvas id="annotationCanvas" includeInRanges="true"/>
    </mx:annotationElements>

                
    <mx:seriesFilters>
      <mx:Array/>
    </mx:seriesFilters>
    
    <mx:horizontalAxisRenderer>
      <mx:AxisRenderer axis="{xAxis}"
                       axisStroke="{simpleStroke}"
                       fontSize="{labelFontSize}"
                       fontFamily="Arial"
                       fontAntiAliasType="advanced"/>
    </mx:horizontalAxisRenderer>
    
    <mx:verticalAxisRenderer>
      <mx:AxisRenderer axis="{yAxis}"
                       axisStroke="{zeroStroke}"
                       fontSize="{labelFontSize}"
                       fontFamily="Arial"
                       fontAntiAliasType="advanced"/>
    </mx:verticalAxisRenderer>
  </mx:LineChart>

</mx:Canvas>
